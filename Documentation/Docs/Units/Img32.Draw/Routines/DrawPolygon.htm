<html>

<head>
    
  <script type="text/javascript" src="../../../../Scripts/SyntaxHighlighter/scripts/shCore.js">
  </script>
    
  <script type="text/javascript" src="../../../../Scripts/SyntaxHighlighter/scripts/shBrushDelphi.js">
  </script>
    
  <link type="text/css" rel="stylesheet" href="../../../../Scripts/SyntaxHighlighter/styles/shCore.css">
    
  <link type="text/css" rel="stylesheet" href="../../../../Scripts/SyntaxHighlighter/styles/shThemeDefault.css">
  

  <title>DrawPolygon</title>

  <meta name="viewport" content="width=device-width, initial-scale=1">


  <link rel="stylesheet" href="../../../../Styles/Default.css" type="text/css">

    
  <script type="text/javascript" src="../../../../Scripts/bootstrap.js">
  </script>
  
</head>

<body bgcolor="#FFFFFF">
    
  <!-- THIS FILE HAS BEEN AUTOMATICALLY PROCESSED FROM A SOURCE COPY -->
    
  <!-- DO NOT EDIT MANUALLY !!! -->
  
  <table class="Banner" cellspacing="0" cellpadding="0" border="0" bordercolorlight="#303080" bordercolordark="#7070B0">
    <tr>
      <td class="Banner" nowrap=""><a href="../../../_Body.htm" class="Banner"><img src="../../../../Images/_Home.png" align="absmiddle">Index</a>
      </td>
      <td class="Banner" nowrap=""><a href="../_Body.htm" class="Banner"><img src="../../../../Images/_Unit.png" align="absmiddle">Img32.Draw</a>
      </td>
      <td class="Banner" width="100%" align="right"><img src="../../../../Images/_Project_Logo.png" align="absmiddle">
      </td>
    </tr>
  </table>
  <h1>DrawPolygon</h1>


  <p class="Decl"><b>procedure</b> DrawPolygon(img: TImage32; <b>const</b> polygon: TPathD; fillRule: TFillRule; color: TColor32); <b>overload</b>;</p>


  <p class="Decl"><b>procedure</b> DrawPolygon(img: TImage32; <b>const</b> polygon: TPathD; fillRule: TFillRule; renderer: TCustomRenderer); <b>overload</b>;</p>


  <p class="Decl"><b>procedure</b> DrawPolygon(img: TImage32; <b>const</b> polygons: TPathsD; fillRule: TFillRule; color: TColor32); <b>overload</b>;</p>


  <p class="Decl"><b>procedure</b> DrawPolygon(img: TImage32; <b>const</b> polygons: TPathsD; fillRule: TFillRule; renderer: TCustomRenderer); <b>overload</b>;</p>

<br>

  <p class="Body"> 
    <table class="white">

      <tr>
        <td><b>Example 1</b>
        </td>
      </tr>

      <tr>
  
        <td>
    <div class="Code">
            <pre class="brush: delphi;">
  uses Img32, Img32.Fmt.PNG, Img32.vector, Img32.Draw;
  ...
  var
    img: TImage32;
    path: TPathD;
    rec: TRect;
  begin
    img := TImage32.Create(256,256);
    rec := img.Bounds;
    Windows.InflateRect(rec, -8,-8);
    path := Pie(rec, angle15, -angle15);
    
    //start with a drop shadow
    DrawShadow(img, path, frNonZero, 8);
    //draw the polygon
    DrawPolygon(img, path, frNonZero, $FF00DD00);
    //and add a 3D button effect
    Draw3D(img, path, frNonZero, 10,6);
    //finish with a solid green outline
    DrawLine(img, path, 5, clGreen32, esPolygon);

    img.SaveToFile('pie.png');
    img.Free;
  end;
            </pre></div>
  
        </td>

      </tr>

      <tr>
  
        <td>
    <img src="../../../../Images/color_render.png">
  
        </td>

      </tr>

    </table> </p>


  <p class="Body"> 
    <table class="white">

      <tr>
        <td><b>Example 2</b>
        </td>
      </tr>

      <tr>
  
        <td>
    <div class="Code">
            <pre class="brush: delphi;">
uses Img32, Img32.Fmt.PNG, Img32.vector, Img32.Draw;
  ...
var
  img: TImage32;
  rec: TRect;
  path: TPathD;
  imageRenderer: TImageRenderer;
begin
  img := TImage32.Create(256,256);
  rec := Rect(6,6, 250,250);
  path := Ellipse(rec);
  imageRenderer := TImageRenderer.Create(tfsRotate180);
  imageRenderer.Image.LoadFromResource('TILE', 'BMP');
  imageRenderer.Image.Resize(20,20);
  DrawPolygon(img, path, frEvenOdd, imageRenderer);
  DrawLine(img, path, 6, clNavy32, esPolygon);
  img.SaveToFile('tiled_ellipse.png');
  imageRenderer.Free;  
  img.Free;
end;
            </pre></div>
  
        </td>

      </tr>

      <tr>
  
        <td>
  <img src="../../../../Images/ImageRenderer.png">
  
        </td>

      </tr>

    </table> </p>


  <p class="Body"> 
    <table class="white">

      <tr>
        <td><b>Example 3</b>
        </td>
      </tr>

      <tr>
  
        <td>
    <div class="Code">
            <pre class="brush: delphi;">
  uses Img32, Img32.Fmt.PNG, Img32.vector, Img32.Draw;
  ...
  var
    img: TImage32;
    path: TPathD;
    rec: TRect;
    radGradRend: TRadialGradientRenderer;
  begin
    img := TImage32.Create(256,256);
    rec := img.Bounds;
    Windows.InflateRect(rec, -3,-3);
    path := Pie(rec, angle15, -angle15);
    
    //setup the gradient colors
    radGradRend := TRadialGradientRenderer.Create;
    radGradRend.SetParameters(rec, clFuchsia32, clBlue32);
    radGradRend.InsertColorStop(0.3, clRed32);
    radGradRend.InsertColorStop(0.4, clYellow32);
    radGradRend.InsertColorStop(0.5, clYellow32);
    radGradRend.InsertColorStop(0.7, clLime32);
    radGradRend.InsertColorStop(0.8, clAqua32);
    //do the drawing
    DrawPolygon(img, path, frNonZero, radGradRend);
    DrawLine(img, path, 5, clMaroon32, esPolygon);

    img.SaveToFile('pie3.png');
    radGradRend.Free;
    img.Free;
  end;
            </pre></div>
  
        </td>

      </tr>

      <tr>
  
        <td>
    <img src="../../../../Images/radial_gradient.png">
  
        </td>

      </tr>

    </table> </p>



    
  <p class="Copyright" id="auto"> <br><br> Copyright &copy;2019 Angus Johnson &nbsp; - &nbsp; Image32 ver. 4.2 &nbsp; - &nbsp; Documentation last updated on 27 July 2022 <br><br> </p>
  
</body>

</html>