<html>

<head>

  <title>DrawPolygon</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="../../../../Styles/Default.css" type="text/css">
<script type="text/javascript" src="../../../../CodeScripts/SyntaxHighlighter/scripts/shCore.js"></script><script type="text/javascript" src="../../../../CodeScripts/SyntaxHighlighter/scripts/shBrushDelphi.js"></script><script type="text/javascript" src="../../../../CodeScripts/SyntaxHighlighter/scripts/shBrushCpp.js"></script><script type="text/javascript" src="../../../../CodeScripts/SyntaxHighlighter/scripts/shBrushCSharp.js"></script><link rel="stylesheet" type="text/css" href="../../../../Styles/default.css"/><link rel="stylesheet" type="text/css" href="../../../../Menu/menu.css"/><link rel="stylesheet" type="text/css" href="../../../../CodeScripts/SyntaxHighlighter/styles/shCoreDefault.css"/><link rel="stylesheet" type="text/css" href="../../../../CodeScripts/SyntaxHighlighter/styles/shThemeDefault.css"/><meta name="viewport" content="width=device-width, initial-scale=1.0"><script type="text/javascript" src="../../../../Menu/menu.js"></script><script type="text/javascript" src="../../../../CodeScripts/bootstrap.js"></script>
</head>

<body bgcolor="#FFFFFF">
  <div class="menu" id="menu"><a class="ancestor" href="../../../_Body.htm">Index</a><a class="ancestor" href="../_Body.htm">Img32.Draw</a><span class="active">DrawPolygon</span>
  </div><br><br>

  <h1>DrawPolygon</h1>
  <p class="Decl"><b>procedure</b> DrawPolygon(img: TImage32; <b>const</b> polygon: TPathD; fillRule: TFillRule; color: TColor32); <b>overload</b>;</p>
  <p class="Decl"><b>procedure</b> DrawPolygon(img: TImage32; <b>const</b> polygon: TPathD; fillRule: TFillRule; renderer: TCustomRenderer); <b>overload</b>;</p>
  <p class="Decl"><b>procedure</b> DrawPolygon(img: TImage32; <b>const</b> polygons: TPathsD; fillRule: TFillRule; color: TColor32); <b>overload</b>;</p>
  <p class="Decl"><b>procedure</b> DrawPolygon(img: TImage32; <b>const</b> polygons: TPathsD; fillRule: TFillRule; renderer: TCustomRenderer); <b>overload</b>;</p>
  <div class="code">
<b>Example 1</b><br>

    <pre class="brush: delphi;">
  uses Img32, Img32.Fmt.PNG, Img32.vector, Img32.Draw;
  ...
  var
    img: TImage32;
    path: TPathD;
    rec: TRect;
  begin
    img := TImage32.Create(256,256);
    rec := img.Bounds;
    Windows.InflateRect(rec, -8,-8);
    path := Pie(rec, angle15, -angle15);
    
    //start with a drop shadow
    DrawShadow(img, path, frNonZero, 8);
    //draw the polygon
    DrawPolygon(img, path, frNonZero, $FF00DD00);
    //and add a 3D button effect
    Draw3D(img, path, frNonZero, 10,6);
    //finish with a solid green outline
    DrawLine(img, path, 5, clGreen32, esPolygon);

    img.SaveToFile('pie.png');
    img.Free;
  end;
    </pre>
  </div>
  <div><img src="../../../../Images/color_render.png">

  </div>
  <div class="code">
<b>Example 2</b><br>

    <pre class="brush: delphi;">
uses Img32, Img32.Fmt.PNG, Img32.vector, Img32.Draw;
  ...
var
  img: TImage32;
  rec: TRect;
  path: TPathD;
  imageRenderer: TImageRenderer;
begin
  img := TImage32.Create(256,256);
  rec := Rect(6,6, 250,250);
  path := Ellipse(rec);
  imageRenderer := TImageRenderer.Create(tfsRotate180);
  imageRenderer.Image.LoadFromResource('TILE', 'BMP');
  imageRenderer.Image.Resize(20,20);
  DrawPolygon(img, path, frEvenOdd, imageRenderer);
  DrawLine(img, path, 6, clNavy32, esPolygon);
  img.SaveToFile('tiled_ellipse.png');
  imageRenderer.Free;  
  img.Free;
end;
    </pre>
  </div>
  <div><img src="../../../../Images/ImageRenderer.png">

  </div>
  <div class="code">
<b>Example 3</b><br>

    <pre class="brush: delphi;">
  uses Img32, Img32.Fmt.PNG, Img32.vector, Img32.Draw;
  ...
  var
    img: TImage32;
    path: TPathD;
    rec: TRect;
    radGradRend: TRadialGradientRenderer;
  begin
    img := TImage32.Create(256,256);
    rec := img.Bounds;
    Windows.InflateRect(rec, -3,-3);
    path := Pie(rec, angle15, -angle15);
    
    //setup the gradient colors
    radGradRend := TRadialGradientRenderer.Create;
    radGradRend.SetParameters(rec, clFuchsia32, clBlue32);
    radGradRend.InsertColorStop(0.3, clRed32);
    radGradRend.InsertColorStop(0.4, clYellow32);
    radGradRend.InsertColorStop(0.5, clYellow32);
    radGradRend.InsertColorStop(0.7, clLime32);
    radGradRend.InsertColorStop(0.8, clAqua32);
    //do the drawing
    DrawPolygon(img, path, frNonZero, radGradRend);
    DrawLine(img, path, 5, clMaroon32, esPolygon);

    img.SaveToFile('pie3.png');
    radGradRend.Free;
    img.Free;
  end;
    </pre>
  </div>
  <div><img src="../../../../Images/radial_gradient.png">

  </div>
  <p class="Copyright" id="auto"> <br><br> Copyright &copy;2010-2023 Angus Johnson&nbsp; - &nbsp;Image32 4.2&nbsp; - &nbsp;Help file built on 26 Mar 2023 <br><br> </p>

</body>

</html>