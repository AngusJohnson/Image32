<html>

<head>
    
  <script type="text/javascript" src="../../../../Scripts/SyntaxHighlighter/scripts/shCore.js">
  </script>
    
  <script type="text/javascript" src="../../../../Scripts/SyntaxHighlighter/scripts/shBrushDelphi.js">
  </script>
    
  <link type="text/css" rel="stylesheet" href="../../../../Scripts/SyntaxHighlighter/styles/shCore.css">
    
  <link type="text/css" rel="stylesheet" href="../../../../Scripts/SyntaxHighlighter/styles/shThemeDefault.css">
  

  <title>BoxDownSampling</title>

  <meta name="viewport" content="width=device-width, initial-scale=1">


  <link rel="stylesheet" href="../../../../Styles/Default.css" type="text/css">

    
  <script type="text/javascript" src="../../../../Scripts/bootstrap.js">
  </script>
  
</head>

<body bgcolor="#FFFFFF">
    
  <!-- THIS FILE HAS BEEN AUTOMATICALLY PROCESSED FROM A SOURCE COPY -->
    
  <!-- DO NOT EDIT MANUALLY !!! -->
  
  <table class="Banner" cellspacing="0" cellpadding="0" border="0" bordercolorlight="#303080" bordercolordark="#7070B0">
    <tr>
      <td class="Banner" nowrap=""><a href="../../../_Body.htm" class="Banner"><img src="../../../../Images/_Home.png" align="absmiddle">Index</a>
      </td>
      <td class="Banner" nowrap=""><a href="../_Body.htm" class="Banner"><img src="../../../../Images/_Unit.png" align="absmiddle">Img32.Resamplers</a>
      </td>
      <td class="Banner" width="100%" align="right"><img src="../../../../Images/_Project_Logo.png" align="absmiddle">
      </td>
    </tr>
  </table>
  <h1>BoxDownSampling</h1>


  <p class="Decl"><b>procedure</b> BoxDownSampling(Image: TImage32; newWidth, newHeight: Integer);</p>

<br>

  <p class="Body">As the name implies, <span class="monobold">BoxDownSampling</span> is only intended for image down-sampling (ie shrinking images) where it avoids the pixelation produced with other resamplers. However, while <span class="monobold">BoxDownSampling</span> avoids pixelation, it does tend toward undue blurring. Also, because <span class="monobold">BoxDownSampling</span> is inferior to other resamplers when performing other transformations (ie when enlarging, rotating, and skewing images), it's not intended as a general purpose resampler.<br><br> 
    <table class="white">

      <tr>
  
        <td><img src="../../../../Images/boxDS_or.png">
        </td>
  
        <td>Original image (512 x 512px)
        </td>

      </tr>

      <tr>
  
        <td><img src="../../../../Images/boxDS_bc.png">
        </td>
  
        <td>Bicubic downsampling: note pixelation<br>
  The original image was resized to 1/4 its original size using bicubic resampling and then reenlarged back to the original size (again using bicubic resampling) so the results of downsampling can be more easily seen.
  
        </td>

      </tr>

      <tr>
  
        <td><img src="../../../../Images/boxDS_ds.png">
        </td>
  
        <td>BoxDownSampling: note mild blurring<br>
  The original image was resized to 1/4 its original size using the BoxDownSampling function and then reenlarged to the original size (using bicubic resampling) so the results of downsampling can be more easily seen.
  
        </td>

      </tr>

    </table> </p>

<br>

  <p class="Body"> <div class="Code">
      <pre class="brush: delphi;">
  uses Img32, Img32.Fmt.PNG, 
  Img32.Extra, Img32.Resamplers;	
	...
var
  img, img2, img3: TImage32;
  rec, rec2, rec3: TRect;
const
  scale = 0.25;
  invScale = 1/scale;
begin
  img := TImage32.Create;
  img2 := TImage32.Create;
  img3 := TImage32.Create;
  try

    //Bicubic downsampling
    img.LoadFromFile('fruit.png');
    img.Resampler := rBicubicResampler;
    img.Scale(scale);

    //BoxDownSampling
    img2.LoadFromFile('fruit.png');
    BoxDownSampling(img2, 
      Round(img2.Width * scale), 
      Round(img2.Height * scale));

    //Merge (average) the two images above
    img3.Assign(img);
    img3.CopyBlend(img2, 
      img2.Bounds, img3.Bounds, BlendAverage);

    //make them all bigger again 
    //so we can see the results
    img.Scale(invScale);
    img.SaveToFile('bicubic.png');
    img2.Scale(invScale);
    img2.SaveToFile('box.png');
    img3.Scale(invScale);
    img3.SaveToFile('merged.png');
  finally
    img.free;
    img2.free;
    img3.free;
  end;
end;
      </pre></div> </p>


    
  <p class="Copyright" id="auto"> <br><br> Copyright &copy;2019 Angus Johnson &nbsp; - &nbsp; Image32 ver. 4.2 &nbsp; - &nbsp; Documentation last updated on 27 July 2022 <br><br> </p>
  
</body>

</html>