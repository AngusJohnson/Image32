<html>

<head>

  <title>RamerDouglasPeucker</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="../../../../Styles/Default.css" type="text/css">
<script type="text/javascript" src="../../../../CodeScripts/SyntaxHighlighter/scripts/shCore.js"></script><script type="text/javascript" src="../../../../CodeScripts/SyntaxHighlighter/scripts/shBrushDelphi.js"></script><script type="text/javascript" src="../../../../CodeScripts/SyntaxHighlighter/scripts/shBrushCpp.js"></script><script type="text/javascript" src="../../../../CodeScripts/SyntaxHighlighter/scripts/shBrushCSharp.js"></script><link rel="stylesheet" type="text/css" href="../../../../Styles/default.css"/><link rel="stylesheet" type="text/css" href="../../../../Menu/menu.css"/><link rel="stylesheet" type="text/css" href="../../../../CodeScripts/SyntaxHighlighter/styles/shCoreDefault.css"/><link rel="stylesheet" type="text/css" href="../../../../CodeScripts/SyntaxHighlighter/styles/shThemeDefault.css"/><meta name="viewport" content="width=device-width, initial-scale=1.0"><script type="text/javascript" src="../../../../Menu/menu.js"></script><script type="text/javascript" src="../../../../CodeScripts/bootstrap.js"></script>
</head>

<body bgcolor="#FFFFFF">
  <div class="menu" id="menu"><a class="ancestor" href="../../../_Body.htm">Index</a><a class="ancestor" href="../_Body.htm">Img32.Extra</a><span class="active">RamerDouglasPeucker</span>
  </div><br><br>

  <h1>RamerDouglasPeucker</h1>
  <p class="Decl"><b>function</b> RamerDouglasPeucker(<b>const</b> path: TPathD; epsilon: double): TPathD; <b>overload;</b><br><br></p>

  <p class="Decl"><b>function</b> RamerDouglasPeucker(<b>const</b> path: TPathsD; epsilon: double): TPathsD; <b>overload;</b></p><br class="half">

  <p class="maroon"><b>This function has been deprecated in favour of <a href="./SimplifyPaths.htm">SimplifyPaths</a> which is much better when simplifying <em>closed</em> paths.</b></p>
  <p> A line simplification algorithm that removes extraneous vertices.<br><br> The algorithm recursively finds the vertex between line endpoints that's furthest from the virtual segment joining these endpoints, If this vertex is within a predefined (epsilon) distance, then all vertices between endpoints will be removed. Otherwise the line is divided into two at this vertex and the process is repeated. See <a href="https://en.wikipedia.org/wiki/Ramer–Douglas–Peucker_algorithm"><b>Wikipedia</b></a><br></p>
  <h2 id="Auto-SeeAlso">See Also</h2>
  <p class="Body"><a href="SimplifyPaths.htm">SimplifyPaths</a>, <a href="SmoothToCubicBezier.htm">SmoothToCubicBezier</a>, <a href="Vectorize.htm">Vectorize</a></p>
  <p class="Copyright" id="auto"> <br><br> Copyright &copy;2010-2023 Angus Johnson&nbsp; - &nbsp;Image32 4.6&nbsp; - &nbsp;Help file built on 18 Sep 2024 <br><br> </p>

</body>

</html>