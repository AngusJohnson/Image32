<html>
<head>
  <title>QuickStart</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="../Styles/Default.css" type="text/css"><script type="text/javascript" src="../CodeScripts/SyntaxHighlighter/scripts/shCore.js"></script><script type="text/javascript" src="../CodeScripts/SyntaxHighlighter/scripts/shBrushDelphi.js"></script><script type="text/javascript" src="../CodeScripts/SyntaxHighlighter/scripts/shBrushCpp.js"></script><script type="text/javascript" src="../CodeScripts/SyntaxHighlighter/scripts/shBrushCSharp.js"></script><link rel="stylesheet" type="text/css" href="../Styles/default.css"/><link rel="stylesheet" type="text/css" href="../Menu/menu.css"/><link rel="stylesheet" type="text/css" href="../CodeScripts/SyntaxHighlighter/styles/shCoreDefault.css"/><link rel="stylesheet" type="text/css" href="../CodeScripts/SyntaxHighlighter/styles/shThemeDefault.css"/><meta name="viewport" content="width=device-width, initial-scale=1.0"><script type="text/javascript" src="../Menu/menu.js"></script><script type="text/javascript" src="../CodeScripts/bootstrap.js"></script>
</head>
<body bgcolor="#FFFFFF" onload="OnLoadEvent()">
  <div class="menu" id="menu" onmouseleave="OnMouseLeaveEvent()"><a class="ancestor" href="_Body.htm">Index</a><a href="./Overview.htm">Overview</a><a href="./Installation.htm">Installation</a><span class="active">QuickStart</span><span class="submenu_owner" onmouseover="onSubmenuPopup(this)"><span class="submenu_heading">Units</span>
      <div class="submenu_background"><a href="./Units/Img32/_Body.htm">Img32</a><a href="./Units/Img32.Clipper2/_Body.htm">Img32.Clipper2</a><a href="./Units/Img32.CQ/_Body.htm">Img32.CQ</a><a href="./Units/Img32.Draw/_Body.htm">Img32.Draw</a><a href="./Units/Img32.Extra/_Body.htm">Img32.Extra</a><a href="./Units/Img32.Fmt.BMP/_Body.htm">Img32.Fmt.BMP</a><a href="./Units/Img32.Fmt.GIF/_Body.htm">Img32.Fmt.GIF</a><a href="./Units/Img32.Fmt.JPG/_Body.htm">Img32.Fmt.JPG</a><a href="./Units/Img32.Fmt.PNG/_Body.htm">Img32.Fmt.PNG</a><a href="./Units/Img32.Fmt.QOI/_Body.htm">Img32.Fmt.QOI</a><a href="./Units/Img32.Fmt.SVG/_Body.htm">Img32.Fmt.SVG</a><a href="./Units/Img32.FMX/_Body.htm">Img32.FMX</a><a href="./Units/Img32.Layers/_Body.htm">Img32.Layers</a><a href="./Units/Img32.Resamplers/_Body.htm">Img32.Resamplers</a><a href="./Units/Img32.Storage/_Body.htm">Img32.Storage</a><a href="./Units/Img32.SVG.Reader/_Body.htm">Img32.SVG.Reader</a><a href="./Units/Img32.Text/_Body.htm">Img32.Text</a><a href="./Units/Img32.Transform/_Body.htm">Img32.Transform</a><a href="./Units/Img32.Vector/_Body.htm">Img32.Vector</a>
      </div></span><a href="./Examples.htm">Examples</a><a href="./Img32.Panels/_Body.htm">Img32.Panels</a><a class="icon_container" id="icon_container" href="javascript:void(0)" onclick="hamburger()"><img id="menu_icon" src="../Menu/hamburger.svg"></a>
  </div><br><br>

  <h1>QuickStart</h1>
  <p> <b>The TImage32 class is key.</b><br><br> The <a href="./Units/Img32/Classes/TImage32/_Body.htm"><b>TImage32</b></a> object contains a single image, and all image operations act upon this object.<br> 
    <div class="code">
      <pre class="brush: delphi;">
  uses Img32;
  ...
  img := TImage32.Create;
  //DO STUFF
  img.Free;
      </pre>
    </div> </p>
  <hr><br>
  <p> <b>Image storage, formats &amp; file access.</b><br><br> The <a href="./_Body.htm"><b>Image32 Library</b></a> provides file access to BMP, PNG &amp; JPG storage via the Img32.Fmt.BMP, Img32.Fmt.PNG &amp; Img32.Fmt.JPG modules respectively.<br> 
    <div class="code">
      <pre class="brush: delphi;">
  uses Img32, Img32.Fmt.PNG;
  ...
  img := TImage32.Create;
  img.LoadFromFile('beetle.png');
  //DO STUFF
  img.SaveToFile('beetle_modified.png');
  img.Free;
      </pre>
    </div> </p>
  <hr><br>
  <p> <b>Image processing</b><br><br> The <a href="./_Body.htm"><b>Image32</b></a> library has an extensive list of classes and functions that manipulate images including: hue, luminance &amp; saturation adjustment; box blur &amp; Gaussian blur; erase color; blend merging images; crop; emboss; flip &amp; rotation; scaling; sharpen; skew; transformations; and special effects<br> </p>
  <div class="code">
    <pre class="brush: delphi;">
  uses Img32, Img32.Fmt.PNG;
  ...
var
  img: TImage32;
begin
  img := TImage32.Create;
  img.LoadFromFile('fruit.png');
  img.Rotate(-angle45);
  img.SaveToFile('fruit45.png');
  img.Free;
    </pre>
  </div>
  <div><span class="floatLeft"> <img style="vertical-align: -128px;" src="../Images/fruit_rot45.png"> </span>
  </div>
  <div class="code">
    <pre class="brush: delphi;">
  uses Img32, Img32.Extra, Img32.Fmt.PNG;
  ...
  img := TImage32.Create;
  img.LoadFromFile('fruit.png');  
  img.SaveToFile('c:\temp\fruit_before.png');
  Sharpen(img, 3, 10);
  img.SaveToFile('c:\temp\fruit_after.png');
  img.Free;
    </pre>
  </div>
  <div><span class="floatLeft"> <img src="../Images/fruit.png"> <span class="plusImg"><img src="../Images/right_arrow.png"></span> <img src="../Images/fruit_sharp.png"> </span>
  </div>
  <div class="code">
    <pre class="brush: delphi;">
  uses Img32, Img32.Vector, 
  Img32.Fmt.PNG, Img32.Transform;
  ...
  var
    img: TImage32;
    src, dst: TPathD;
  begin
    img := TImage32.Create;
    img.LoadFromFile('clouds.png');
    src := Rectangle(img.Bounds);
    dst := CopyPath(src);
    dst[1].Y := img.Height div 8;
    dst[2].Y := img.Height * 7 div 8;
    if ProjectiveTransform(img, src, dst, NullRect) then
    img.SaveToFile('c:\temp\clouds_proj.png');
    img.Free;
  end;
    </pre>
  </div>
  <div><span class="floatLeft"> <img src="../Images/clouds.png"> <span class="plusImg"><img src="../Images/right_arrow.png"></span> <img src="../Images/projective.png"> </span>
  </div>
  <hr><br>
  <p> <b>Polygon rendering</b><br><br> <em>Img32</em> provides a large number of drawing tools.<br> The <a href="./Units/Img32.Draw/_Body.htm"><b>Img32.Draw</b></a> module provides functions for <a href="./Units/Img32.Draw/Routines/DrawLine.htm"><b>line</b></a>, <a href="./Units/Img32.Draw/Routines/DrawDashedLine.htm"><b>dashed line</b></a> &amp; <a href="./Units/Img32.Draw/Routines/DrawPolygon.htm"><b>polygon</b></a> drawing, and includes several renderers that produce: solid color; tiled image; and linear &amp; radial gradient renders.<br> The <a href="./Units/Img32.Vector/_Body.htm"><b>Img32.Vector</b></a> module also provides numerous functions for vector drawing, including: Rectangle; RoundRect; Ellipse; Pie &amp; Arc; Spline &amp; Bezier; Star; etc.<br> </p>
  <div class="code">
    <pre class="brush: delphi;">
      uses Img32, Img32.Fmt.PNG,
        Img32.vector, Img32.Draw, Img32.Clipper2;
      ...
      var
        img: TImage32;
        rec: TRect;
        path: TPathD;
        paths: TPathsD;
        radGradRend: TRadialGradientRenderer;
      begin
        img := TImage32.Create;
        img.SetSize(256,256);
        rec := img.Bounds;
        Img32.Vector.InflateRect(rec, -50,-50);

        //draw a gradient filled star
        path := Star(PointD(128, 128), 50, 100, 7);
        radGradRend := TRadialGradientRenderer.Create;
        radGradRend.SetParameters(rec, clFuchsia32, clYellow32);
        DrawPolygon(img, path, frNonZero, radGradRend);
        radGradRend.Free;
        DrawLine(img, path, 1, clBlack32, esPolygon);
        //draw a dashed outline of the star
        paths := InflatePath(path, 7, jsRound);
        DrawDashedLine(img, paths,
          [4,4], nil, 1, clBlack32, esPolygon);
        img.SaveToFile('c:\temp\star.png');
        img.Free;
      end;
    </pre>
  </div>
  <div><span class="floatLeft"> <img src="../Images/star.png"> </span>
  </div>
  <div class="code">
    <pre class="brush: delphi;">
  uses Img32, Img32.Fmt.PNG, Img32.Text, 
  Img32.Vector, Img32.Draw, Img32.Extra;
  
  ...
  var
    img: TImage32;
    textOutline: TPathsD;
    impactFont: TFontReader;
    impact96: TFontCache;
  begin
    img := TImage32.Create(400,150);
    // Instruct the font manager to load 
    // the Windows' Impact TTF font
    FontManager.Load('Impact', 800);
    // and then get the TFontReader for this font
    impactFont := FontManager.GetFont('Impact'); 
    // create character outlines using font size 96
    impact96 := TFontCache.Create(impactFont, DpiAware(96));
    try
      textOutline := 
        impact96.GetTextOutline(20, 130, 'Image32');
      //draw textOutline using shadow &amp; 3D effects
      DrawShadow(img, textOutline, frNonZero, 3);
      DrawPolygon(img, textOutline, frNonZero, $FF00DD00);
      Draw3D(img, textOutline, frNonZero, 3,4);
      DrawLine(img, textOutline, 1, clBlack32, esPolygon);
      img.SaveToFile('c:\temp\Image32.png');
    finally
      img.Free;
      impact96.Free;
    end;
  end;
    </pre>
  </div>
  <div><span class="floatLeft"> <img src="../Images/text_3D.png"> </span>
  </div>
  <hr><br>
  <p> <b>What! No VCL.Graphics?</b><br><br> This was a deliberate design decision so it'd be relatively easy to translate the <em>Img32</em> library into another language, and for a different operating system. But having said that, VCL.Graphics is still used in the Img32.Fmt.PNG and Img32.Fmt.JPG modules. <br> <b>So how can I display images in Delphi forms?</b><br><br> All drawing in Windows is performed using Device Contexts (DCs) and Delphi's VCL.Graphics encapsulates DCs in TCanvas objects, with the actual DC being the TCanvas.Handle. So, using TImage32's CopyToDC method, its image can be displayed in any TControl with a TCanvas property; and that includes TForm, TPanel and TImage components. 
    <div class="code">
      <pre class="brush: delphi;">
  uses Img32;
  ...
  img := TImage32.Create;
  //DO STUFF WITH img
  
  //assuming a standard TImage (Image1) component has been 
  //dropped somewhere onto a form in the Delphi IDE.   
  Image1.Picture.Bitmap.SetSize(img.Width, img.Height);
  //if 'img' is semi-transparent, prepare the target background
  Image1.Picture.Bitmap.Canvas.Brush.Color := clBtnFace;
  Image1.Picture.Bitmap.Canvas.FillRect(Image1.ClientRect);
  //now copy 'img' to Image1
  img.CopyToDc(Image1.Picture.Bitmap.Canvas.Handle);
  img.Free;
      </pre>
    </div> </p>
  <p> Otherwise use the accompanying <a href="Img32.Panels/_Body.htm"><b>Img32.Panels</b></a> unit which contains the TImage32Panel component. </p>
  <h2 id="Auto-SeeAlso">See Also</h2>
  <p class="Body"><a href="_Body.htm"><b>Index</b></a>, <a href="Img32.Panels/_Body.htm">Img32.Panels</a>, <a href="Units/Img32.Draw/_Body.htm">Img32.Draw</a>, <a href="Units/Img32.Draw/Routines/DrawDashedLine.htm">DrawDashedLine</a>, <a href="Units/Img32.Draw/Routines/DrawLine.htm">DrawLine</a>, <a href="Units/Img32.Draw/Routines/DrawPolygon.htm">DrawPolygon</a>, <a href="Units/Img32.Vector/_Body.htm">Img32.Vector</a>, <a href="Units/Img32/Classes/TImage32/_Body.htm">TImage32</a></p>
  <p class="Copyright" id="auto"> <br><br> Copyright &copy;2010-2023 Angus Johnson&nbsp; - &nbsp;Image32 4.6&nbsp; - &nbsp;Help file built on 18 Sep 2024 <br><br> </p>

</body>
</html>
